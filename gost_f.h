#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "gost.h"



void X(unsigned char *first_arg, unsigned char *second_arg, unsigned char *res)
{
	for(long long i=0;i<64;i++)
		res[i] = first_arg[i]^second_arg[i];
}

void S(unsigned char *res)
{	

	for(long long i=0;i<64;i++)
		res[i] = pi[res[i]];

}

void P(unsigned char *res)
{	
	unsigned char arr[64] = {};
	long long i = 0;
	for(;i<64;i++)
		arr[i] = res[t[i]];

	for(i=0;i<64;i++)
	{
		res[i] = arr[i];
	}

}

void L(unsigned char *res)
{	
	unsigned long long n = 0;
	unsigned long long j;
	for(long long i=0; i<8; i++)
	{	
		n = 0;
		for(j=0; j<8; j++)
		{	
			for(long long l=0; l<8; l++)
			{
				if(res[i*8+j]&(1<<(7-l)))
					n^=A[j*8+l];
			}
		}
		
		
		for(j=0; j<8; j++)
			{
				res[i*8+j]=(n>>(56-j*8))&0xff;

			}
			
	}
	
}

void XSPL(unsigned char *K, long long i)
{
	X(K,C[i],K);
	S(K);
	P(K);
	L(K);
}

void E(unsigned char *K, unsigned char* m, unsigned char* res)
{
	X(m,K,res);

	for(long long i=0;i<12;i++)
	{
		S(res);
		P(res);
		L(res);
		XSPL(K, i);
		X(res,K,res);
	}
}


void g(unsigned char *N, unsigned char* m, unsigned char* h)
{	

	unsigned char K[64];
	unsigned char t[64];
	X(N,h,K);
	S(K);
	P(K);
	L(K);
	E(K,m,t);
	X(t,h,t);
	X(t,m,h);	
}

void add_mod512(unsigned char *first_arg, unsigned char *second_arg, unsigned char *res)
{	
	for(long long i = 63; i>=0; i--)
		res[i] = (first_arg[i]+second_arg[i])&511;
}


unsigned char * calc_hash(unsigned char* M, long long M_length, unsigned char *h)
{	

	unsigned char  N[64] =
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	
	};

	unsigned char  Sigma[64] =
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	
	};

	unsigned char _512[64] = 
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00
	};

	unsigned char _0[64] = 
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char len_m[64] = 
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char m[64];
	long long i,j;

	

	for(i = M_length/8-1,j=63; j>=0; i--,j--)
		m[j] = M[i];



	while(M_length >= 512)
	{
		g(N,m,h);
		add_mod512(N,_512,N);
		add_mod512(Sigma,m,Sigma);
		M_length -= 512;
	}

	len_m[63] = M_length>>0;
	len_m[62] = M_length>>8;

	for(i = M_length/8-1, j = 63; i>=0 && j>=0; i--, j--)
		m[j] = M[i];

		
	m[j] = 0x01;
	j--;
	for(j;j >= 0;j--)
		m[j] = 0x00;

	



	g(N,m,h);
	add_mod512(N,len_m,N);
	add_mod512(Sigma,m,Sigma);
	g(_0,N,h);	
	g(_0,Sigma,h);
	
	return h;

}


unsigned char* transf(unsigned char* h)
{	
	unsigned char * res;
	unsigned char arr[128];
	unsigned char hex_str[]= "0123456789abcdef";
	for(int i=0;i<64;i++)
	{
		arr[i*2+0]=hex_str[(h[i] >> 4) & 0x0F];
		arr[i*2+1]=hex_str[(h[i] ) & 0x0F];
	}
	memcpy(res, arr,128);
	return res;
}